# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PictureToolUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

#新增代码##################################start1
#导入其他相关模块
import sys
import os
##########################################end1

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setMinimumSize(QtCore.QSize(800, 600))
        MainWindow.setMaximumSize(QtCore.QSize(800, 600))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton_Before = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Before.setGeometry(QtCore.QRect(130, 500, 84, 34))
        self.pushButton_Before.setObjectName("pushButton_before")
        self.pushButton_Next = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Next.setGeometry(QtCore.QRect(250, 500, 84, 34))
        self.pushButton_Next.setObjectName("pushButton_Next")
        self.pushButton_Open = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Open.setGeometry(QtCore.QRect(10, 500, 84, 34))
        self.pushButton_Open.setObjectName("pushButton_Open")
        self.pushButton_Bigger = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Bigger.setGeometry(QtCore.QRect(370, 500, 84, 34))
        self.pushButton_Bigger.setObjectName("pushButton_Bigger")
        self.pushButton_Smaller = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Smaller.setGeometry(QtCore.QRect(490, 500, 84, 34))
        self.pushButton_Smaller.setObjectName("pushButton_Smaller")
        self.label_Image = QtWidgets.QLabel(self.centralwidget)
        self.label_Image.setGeometry(QtCore.QRect(10, 10, 771, 471))
        self.label_Image.setAutoFillBackground(True)
        self.label_Image.setObjectName("label_Image")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 30))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # 新增代码##################################start2
        # 设置图片的默认路径为当前工作路径(项目的路径)
        self.defaultImFolder = os.getcwd()
        # 设置为填充模式(图片填充满 Label)
        self.label_Image.setScaledContents(True)
        # 监听按钮的单击
        self.pushButton_Open.clicked.connect(self.OpenPictureDir)
        self.pushButton_Next.clicked.connect(self.ShowNextImg)
        self.pushButton_Before.clicked.connect(self.ShowBeforeImg)
        self.pushButton_Bigger.clicked.connect(self.DoBiggerImg)
        self.pushButton_Smaller.clicked.connect(self.DoSmallerImg)
        self.imageNameList = []
        ##########################################end2

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "图片浏览工具"))
        self.pushButton_Before.setText(_translate("MainWindow", "上一张"))
        self.pushButton_Next.setText(_translate("MainWindow", "下一张"))
        self.pushButton_Open.setText(_translate("MainWindow", "打开目录"))
        self.pushButton_Bigger.setText(_translate("MainWindow", "放大"))
        self.pushButton_Smaller.setText(_translate("MainWindow", "缩小"))
        self.label_Image.setText(_translate("MainWindow", "请打开目录后选择图片文件夹"))

    # 新增代码##################################start3
    # 单击打开目录按钮,选择图片文件夹
    def OpenPictureDir(self):
        # 在资源管理器窗口中打开默认路径
        selectimgFolder=QtWidgets.QFileDialog.getExistingDirectory(None,"select folder",self.defaultImFolder)
        # 如果有选中路径
        if selectimgFolder != '':
            self.imgFolder = selectimgFolder
        # 获取该路径下面所有的图片名称列表
        self.imageNameList = os.listdir(self.imgFolder)
        # 如果选中的是项目中自带的图片文件夹,则会输出['风景 1.jpg', '风景 2.jpeg','风景 3.jpeg', '风景 4.jpeg']
        # print(imageNameList)
        if len(self.imageNameList) > 0:
            # 获取第一张图片的路径
            imgPath = os.path.join(self.imgFolder, self.imageNameList[0])
            # 绘制图片,显示出来
            self.pix = QtGui.QPixmap(imgPath)
            self.label_Image.setPixmap(self.pix)
            # 标记第一张图片的 id 为 0
            self.curImgId = 0
    ##########################################end3

    # 新增代码##################################start4
    # 单击下一张按钮,显示下一张图片
    def ShowNextImg(self):
        # 如果不存在图片,则跳出
        if len(self.imageNameList) == 0:
            return
        imgCount = len(self.imageNameList)
        # 当前如果不是最后一张图片,才可以显示下一张
        if self.curImgId < imgCount - 1:
            imPath = os.path.join(self.imgFolder, self.imageNameList[self.curImgId + 1])
            self.pix = QtGui.QPixmap(imPath)
            self.label_Image.setPixmap(self.pix)
            self.curImgId = self.curImgId + 1
    ##########################################end4

    # 新增代码##################################start5
    # 单击上一张按钮,显示上一张图片
    def ShowBeforeImg(self):
        # 如果不存在图片,则跳出
        if len(self.imageNameList) == 0:
            return
        # 当前如果不是第一张图片,才能显示上一张
        if self.curImgId > 0:
            imPath = os.path.join(self.imgFolder, self.imageNameList[self.curImgId - 1])
            self.pix = QtGui.QPixmap(imPath)
            self.label_Image.setPixmap(self.pix)
            self.curImgId = self.curImgId - 1
        if self.curImgId < 0:
            self.curImgId = 0
    ##########################################end5

    # 新增代码##################################start6
    # 单击放大按钮进行放大
    def DoBiggerImg(self):
        # 如果不存在图片,则跳出
        if len(self.imageNameList) == 0:
            return
        # 控制放大后,高度最大不超过 900
        if self.label_Image.height() >= 900:
            return
        self.label_Image.setFixedSize(int(self.label_Image.width() * 1.1), int(self.label_Image.height() * 1.1))
    ##########################################end6

    # 新增代码##################################start7
    # 单击缩小按钮进行缩小
    def DoSmallerImg(self):
        # 如果不存在图片,则跳出
        if len(self.imageNameList) == 0:
            return
        # 控制缩小后后,高度最小不小于 100
        if self.label_Image.height() <= 100:
            return
        self.label_Image.setFixedSize(int(self.label_Image.width()*0.9), int(self.label_Image.height() * 0.9))
    ##########################################end7

# 新增代码##################################start8
# 主函数入口,打开 PictureToolUI 界面
if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(mainWindow)
    mainWindow.show()
    sys.exit(app.exec_())
##########################################end8
